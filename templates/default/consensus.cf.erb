# Input data and settings
spectra_tar="spectra.tar";
db_fasta="barleyprots.fa";
blast_index_name="barleyprots";
omssa_mods="mods.xml";
omssa_usermods="usermods.xml";
numthreads="4";


# Convert Spectra and index databases
spectraFiles=getSupportedSpectraFilesFromTar(spectra_tar:spectra_tar);
mzMLFiles=convertSpectraFiles(spectraFile:spectraFiles);
db_fasta_decoy=makeDecoyDB(db_fasta:db_fasta);
#mzMLFiles;
db_blastDB_tar=makeBlastDB(db_fasta:db_fasta idx_name:blast_index_name);
db_blastDB_decoy_tar=makeBlastDB(db_fasta:db_fasta_decoy idx_name:blast_index_name);
db_msgfDB_tar=makeMsgfDB(db_fasta:db_fasta);
db_msgfDB_decoy_tar=makeMsgfDB(db_fasta:db_fasta_decoy);
db_TandemDB=makeTandemDB(db_fasta:db_fasta);
db_Tandem_decoyDB=makeTandemDB(db_fasta:db_fasta_decoy);

csvResult=perSpectraFile(mzMLFiles:mzMLFiles 
	db_fasta:db_fasta db_fasta_decoy:db_fasta_decoy db_blastDB_tar:db_blastDB_tar
	db_blastDB_decoy_tar:db_blastDB_decoy_tar db_msgfDB_tar:db_msgfDB_tar
	db_msgfDB_decoy_tar:db_msgfDB_decoy_tar db_TandemDB:db_TandemDB
	db_Tandem_decoyDB:db_Tandem_decoyDB omssa_mods:omssa_mods 
	omssa_usermods:omssa_usermods blast_index_name:blast_index_name
	numthreads:numthreads);
csvResult;

#Run the worflow once for each spectra file in spectra.tar
deftask perSpectraFile(csvResult(File):mzMLFiles(File) 
		[db_fasta db_fasta_decoy 
		 db_blastDB_tar(File) db_blastDB_decoy_tar(File) db_msgfDB_tar(File) 
		 db_msgfDB_decoy_tar(File) db_TandemDB(File) db_Tandem_decoyDB(File) 
		 omssa_mods omssa_usermods blast_index_name numthreads]) {

	# Run database search tools
	OmssaRes=runOmssa(mzMLFile:mzMLFiles db_blastDB_tar:db_blastDB_tar blast_index_name:blast_index_name omssa_mods:omssa_mods omssa_usermods:omssa_usermods);
	OmssaDecoyRes=runOmssa(mzMLFile:mzMLFiles db_blastDB_tar:db_blastDB_decoy_tar blast_index_name:blast_index_name omssa_mods:omssa_mods omssa_usermods:omssa_usermods);

	MsgfRes=runMsgf(mzMLFile:mzMLFiles db_fasta:db_fasta db_msgfDB_tar:db_msgfDB_tar);
	MsgfDecoyRes=runMsgf(mzMLFile:mzMLFiles db_fasta:db_fasta_decoy db_msgfDB_tar:db_msgfDB_decoy_tar);

	TandemRes=runTandem(mzMLFile:mzMLFiles db_TandemDB:db_TandemDB);
	TandemDecoyRes=runTandem(mzMLFile:mzMLFiles db_TandemDB:db_Tandem_decoyDB);


	# Create consensus
#	MergedOmssa=mergeResults(idxml_results:OmssaRes);
#	MergedDecoyOmssa=mergeResults(idxml_results:OmssaDecoyRes);
#	MergedMsgf=mergeResults(idxml_results:MsgfRes);
#	MergedDecoyMsgf=mergeResults(idxml_results:MsgfDecoyRes);
#	MergedTandem=mergeResults(idxml_results:TandemRes);
#	MergedDecoyTandem=mergeResults(idxml_results:TandemDecoyRes);
#	TargetResults=MergedOmssa MergedMsgf MergedTandem;
#	DecoyResults=MergedDecoyOmssa MergedDecoyMsgf MergedDecoyTandem;

	TargetResults=OmssaRes MsgfRes TandemRes;
	DecoyResults=OmssaDecoyRes MsgfDecoyRes TandemDecoyRes;

	MergedTargetResults=mergeResults(idxml_results:TargetResults);
	MergedDecoyResults=mergeResults(idxml_results:DecoyResults);

	ConsensusTargetResults=runConsensus(idxml_results:MergedTargetResults numthreads);
	ConsensusDecoyResults=runConsensus(idxml_results:MergedDecoyResults numthreads);

	FDRResults=establishFDR(target_idxml:ConsensusTargetResults decoy_idxml:ConsensusDecoyResults);

	MappedFDRResults=mapPeptides(idxml_results:FDRResults db_fasta:db_fasta);
	csvResult=idxml2csv(idxml_results:MappedFDRResults);
}


###################################################################
# 			   Deftasks                            #
###################################################################

#
# 			Run Algorithms
#

# Run OMSSA on the mzML data using the TOPP OMSSAAdapter
deftask runOmssa(OmssaRes(File):mzMLFile(File) db_blastDB_tar(File) blast_index_name omssa_mods(File) omssa_usermods(File)) in bash *{
	tar xf $db_blastDB_tar
	ln -s `which omssacl` omssacl
	OMSSAAdapter -in $mzMLFile -out res.idXML -database ${blast_index_name}.psq -omssa_executable omssacl
	OmssaRes=res.idXML
}*

# Run MSGF+ on the mzML data using the TOPP MSGFPlusAdapter
deftask runMsgf(MsgfRes(File):mzMLFile(File) db_fasta(File) db_msgfDB_tar(File)) in bash *{
	tar xf $db_msgfDB_tar
	mv $mzMLFile spectra.mzML
	mp=(`whereis MSGFPlus.jar`)
	msgfjarpath=${mp[1]}
	MSGFPlusAdapter -in spectra.mzML -out msgf.idXML -database $db_fasta -executable $msgfjarpath
	MsgfRes=msgf.idXML
}*

# Run X!Tandem on the mzML data using the TOPP XTandenAdapter
deftask runTandem(TandemRes(File):mzMLFile(File) db_TandemDB(File)) in bash *{
	XTandemAdapter -in $mzMLFile -database $db_TandemDB -out tres.idXML
	TandemRes=tres.idXML
}*

#
# 			Index Databases
#

# Index fasta database using makeblastdb from ncbi
deftask makeBlastDB(db_blastDB_tar(File):db_fasta(File) idx_name) in bash *{
	makeblastdb -in $db_fasta -dbtype prot -hash_index -out $idx_name
	tar cf db.tar --remove-files $idx_name*
	db_blastDB_tar=db.tar
}*

# Index fasta database using MSGF+
deftask makeMsgfDB(db_msgfDB_tar(File):db_fasta(File)) in bash *{
	buildsa -d $db_fasta -tda 0
	tar cf msgfdb.tar *.canno *.cnlcp *.csarr *.cseq $db_fasta
	db_msgfDB_tar=msgfdb.tar
}*

# Index fasta database using XTandem
deftask makeTandemDB(db_tandemDB(File):db_fasta(File)) in bash *{
	fasta_pro.exe $db_fasta
	db_tandemDB=${db_fasta}.pro
}*

#
#			Other Tasks
#

# Takes decoy ConsensusID results and target ConsensusID results and performs FDR.
deftask establishFDR(fdr_res(File):target_idxml(File) decoy_idxml(File)) in bash *{
	FalseDiscoveryRate -in_target $target_idxml -in_decoy $decoy_idxml -out res.idXML -peptides_ony
	fdr_res=res.idXML
}*

#
deftask mapPeptides(MappedResults(File):idxml_results(File) db_fasta(File)) in bash *{
	PeptideIndexer -in $idxml_results -fasta $db_fasta -out mappedres.idXML -missing_decoy_action warn -allow_unmatched
	MappedResults=mappedres.idXML
}*

# Convert resutls into easier to read csv format.
deftask idxml2csv(csv_results(File):idxml_results(File)) in bash *{
	TextExporter -in $idxml_results -out res.csv
	csv_results=res.csv
}*

# Create consensus using OpenMS ConsensusID
deftask runConsensus(Consensus(File):idxml_results(File) numthreads) in bash *{
	mv $idxml_results res.idXML
	ConsensusID -in res.idXML -out cons.idXML -threads $numthreads
	Consensus=cons.idXML
}*

# Merged multiple idXML files
deftask mergeResults(MergedResults(File):<idxml_results(File)>) in bash *{
	#iterate files and split by spaces and make sure they end in .idXML
	for i in ${idxml_results[@]}
	do
		cp $i $i.idXML
	done
	files=`ls *.idXML`
	IDMerger -in $files -out merged.idXML
	MergedResults=merged.idXML
}*

# Convert from mzdata, mzXML, mzML, .., mgf to mzML.
deftask convertSpectraFiles(mzMLFile(File):spectraFile(File)) in bash *{
	FileConverter -in $spectraFile -out $mzMLFile -out_type mzML
}*

# Turn a tar file into a list of spectra files.
deftask getSupportedSpectraFilesFromTar(<spectraFiles(File)>:spectra_tar(File)) in bash *{
	tar xf $spectra_tar
	spectraFiles=`tar tf $spectra_tar`
}*

deftask makeDecoyDB(db_fasta_decoy(File):db_fasta(File)) in bash *{
	DecoyDatabase -in $db_fasta -out decoy.fasta
	db_fasta_decoy=decoy.fasta
}*
