# Input data and settings
spectra_tar="spectra.tar";		# Needs to be provided (can contain mgf, mzXML, mzML, or ms2 files).
#spectraFiles='spectra/NUNP1.mgf' 'spectra/NUNP2.mgf' 'spectra/ORG1.mgf' 'spectra/ORG2.mfg';
db_fasta="protein.fasta"; 		# Only provide the target DB (protein) in fasta format ... decoy will be created.
#fa_gz='pep/Homo_sapiens.GRCh38.pep.abinitio.fa.gz' 'pep/Homo_sapiens.GRCh38.pep.all.fa.gz';
blast_index_name="prots"; 		# ignore
omssa_mods="mods.xml";			# File necessary for OMSSA to run.
omssa_usermods="usermods.xml";		# File necessary for OMSSA to run.
numthreads="2"; 			#ConsensusID is slow and the last process so it should run in parallel (give half of the cores to this process).
pmt="0.8"; 				#Precursor mass error tolerance (Daltons)
fmt="0.3"; 				#Fragment (Product) mass error tolerance (Daltons)


# Convert Spectra and index databases
spectraFiles=getSupportedSpectraFilesFromTar(spectra_tar:spectra_tar);
//db_fasta=cat(file:gunzip(gz:fa_gz));
mzMLFiles=convertSpectraFiles(spectraFile:spectraFiles);
#mzMLFiles; #Remove the hashtag at the beginning of the line to store the converted spectra.
db_fasta_decoy=makeDecoyDB(db_fasta:db_fasta);
db_blastDB_tar=makeBlastDB(db_fasta:db_fasta idx_name:blast_index_name);
db_blastDB_decoy_tar=makeBlastDB(db_fasta:db_fasta_decoy idx_name:blast_index_name);
db_msgfDB_tar=makeMsgfDB(db_fasta:db_fasta);
db_msgfDB_decoy_tar=makeMsgfDB(db_fasta:db_fasta_decoy);
db_TandemDB=makeTandemDB(db_fasta:db_fasta);
db_Tandem_decoyDB=makeTandemDB(db_fasta:db_fasta_decoy);

idxml_results=perSpectraFile(mzMLFiles:mzMLFiles 
	db_fasta:db_fasta db_fasta_decoy:db_fasta_decoy db_blastDB_tar:db_blastDB_tar
	db_blastDB_decoy_tar:db_blastDB_decoy_tar db_msgfDB_tar:db_msgfDB_tar
	db_msgfDB_decoy_tar:db_msgfDB_decoy_tar db_TandemDB:db_TandemDB
	db_Tandem_decoyDB:db_Tandem_decoyDB omssa_mods:omssa_mods 
	omssa_usermods:omssa_usermods blast_index_name:blast_index_name
	numthreads:numthreads pmt:pmt fmt:fmt);
csvResult=idxml2csv(idxml_results:idxml_results mzMLFile:mzMLFiles);
idxml_results;
csvResult;

#Run the worflow once for each spectra file in spectra.tar
deftask perSpectraFile(idxmlResults(File):mzMLFiles(File) 
		[db_fasta db_fasta_decoy 
		 db_blastDB_tar(File) db_blastDB_decoy_tar(File) db_msgfDB_tar(File) 
		 db_msgfDB_decoy_tar(File) db_TandemDB(File) db_Tandem_decoyDB(File) 
		 omssa_mods omssa_usermods blast_index_name numthreads pmt fmt]) {
# Run database search tools
	OmssaRes=runOmssa(mzMLFile:mzMLFiles db_blastDB_tar:db_blastDB_tar blast_index_name:blast_index_name pmt:pmt fmt:fmt omssa_mods:omssa_mods omssa_usermods:omssa_usermods);
	OmssaDecoyRes=runOmssa(mzMLFile:mzMLFiles db_blastDB_tar:db_blastDB_decoy_tar blast_index_name:blast_index_name pmt:pmt fmt:fmt omssa_mods:omssa_mods omssa_usermods:omssa_usermods);
	MsgfRes=runMsgf(mzMLFile:mzMLFiles db_fasta:db_fasta db_msgfDB_tar:db_msgfDB_tar pmt:pmt);
	MsgfDecoyRes=runMsgf(mzMLFile:mzMLFiles db_fasta:db_fasta_decoy db_msgfDB_tar:db_msgfDB_decoy_tar pmt:pmt);
	TandemRes=runTandem(mzMLFile:mzMLFiles db_TandemDB:db_TandemDB pmt:pmt fmt:fmt);
	TandemDecoyRes=runTandem(mzMLFile:mzMLFiles db_TandemDB:db_Tandem_decoyDB pmt:pmt fmt:fmt);
# Combine decoy and target results
	OmssaCombResMerged=establishFDR(target_idxml:OmssaRes decoy_idxml:OmssaDecoyRes numthreads:numthreads);
	MsgfComResMerged=establishFDR(target_idxml:MsgfRes decoy_idxml:MsgfDecoyRes numthreads:numthreads);
	TandemCombResMerged=establishFDR(target_idxml:TandemRes decoy_idxml:TandemDecoyRes numthreads:numthreads);
# Create consensus
	FDRRes=OmssaCombResMerged MsgfComResMerged TandemCombResMerged;
	FDRResMerged=mergeResults(idxml_results:FDRRes);
	ConsensusRes=runConsensus(idxml_results:FDRResMerged pmt:pmt fmt:fmt numthreads:numthreads);
	ConsResMapped=mapPeptides(idxml_results:ConsensusRes db_fasta:db_fasta);
	#FDRResults=calculateFDR(idxml_results:ConsResMapped numthreads:numthreads);
	#FilteredResults=filterResults(idxml_results:FDRResults mzMLFile:mzMLFiles numthreads:numthreads);
	FilteredResults=filterResults(idxml_results:ConsResMapped mzMLFile:mzMLFiles numthreads:numthreads);
	idxmlResults=FilteredResults;
}


###################################################################
# 			   Deftasks                               #
###################################################################


###################################################################
#
# 			Run Algorithms
#

# Run OMSSA on the mzML data using the TOPP OMSSAAdapter
deftask runOmssa(OmssaRes(File):mzMLFile(File) db_blastDB_tar(File) blast_index_name pmt fmt omssa_mods(File) omssa_usermods(File)) in bash *{
	tar xf $db_blastDB_tar
	ln -s `which omssacl` omssacl
	OMSSAAdapter -in $mzMLFile\
		-out ores.idXML\
		-database ${blast_index_name}.psq\
		-omssa_executable omssacl\
		-precursor_mass_tolerance $pmt\
		-fragment_mass_tolerance $fmt
	OmssaRes=ores.idXML
}*

# Run MSGF+ on the mzML data using the TOPP MSGFPlusAdapter
deftask runMsgf(MsgfRes(File):mzMLFile(File) db_fasta(File) db_msgfDB_tar(File) pmt) in bash *{
	tar xf $db_msgfDB_tar
	mv $mzMLFile spectra.mzML
	mp=(`whereis MSGFPlus.jar`)
	msgfjarpath=${mp[1]}
	MSGFPlusAdapter -in spectra.mzML\
		-out mres.idXML\
		-database $db_fasta\
		-executable $msgfjarpath\
		-precursor_error_units Da\
		-precursor_mass_tolerance $pmt
	MsgfRes=mres.idXML
}*

# Run X!Tandem on the mzML data using the TOPP XTandenAdapter
deftask runTandem(TandemRes(File):mzMLFile(File) db_TandemDB(File) pmt fmt) in bash *{
	XTandemAdapter -in $mzMLFile\
		-database $db_TandemDB\
		-out tres.idXML\
		-precursor_error_units Da\
		-fragment_error_units Da\
		-precursor_mass_tolerance $pmt\
		-fragment_mass_tolerance $fmt
	TandemRes=tres.idXML
}*

###################################################################
#
# 			Index Databases
#

# Index fasta database using makeblastdb from ncbi
deftask makeBlastDB(db_blastDB_tar(File):db_fasta(File) idx_name) in bash *{
	makeblastdb -in $db_fasta\
		-dbtype prot\
		-hash_index\
		-out $idx_name
	tar cf db.tar --remove-files $idx_name*
	db_blastDB_tar=db.tar
}*

# Index fasta database using MSGF+
deftask makeMsgfDB(db_msgfDB_tar(File):db_fasta(File)) in bash *{
	buildsa -d $db_fasta -tda 0
	tar cf msgfdb.tar *.canno *.cnlcp *.csarr *.cseq $db_fasta
	db_msgfDB_tar=msgfdb.tar
}*

# Index fasta database using XTandem
deftask makeTandemDB(db_tandemDB(File):db_fasta(File)) in bash *{
	fasta_pro.exe $db_fasta
	db_tandemDB=${db_fasta}.pro
}*

###################################################################
#
#			Other Tasks
#

deftask calcPEP(pepIdXML(File) : idxml_results(File)) in bash *{
	IDPosteriorErrorProbability -in $idxml_results\
		-out $pepIdXML
}*

deftask filterResults(idxml_res(File) : idxml_results(File) mzMLFile(File) numthreads) in bash *{
	idxml_res=$(basename $mzMLFile).idXML
	IDFilter -in $idxml_results\
		-out $idxml_res\
		-best:strict\
		-unique\
		-remove_decoys\
		-delete_unreferenced_peptide_hits\
		-score:pep 0.05\
		-mz:unit Da
}*

deftask inferProteins(idxml_res(File) : idxml_results(File) numthreads) in bash *{
	ProteinInference -in $idxml_results\
		-out $idxml_res\
		-min_peptides_per_protein 2\
		-threads $numthreads
}*

# Takes decoy ConsensusID results and target ConsensusID results and performs FDR.
deftask establishFDR(fdr_res(File):target_idxml(File) decoy_idxml(File) numthreads) in bash *{
	FalseDiscoveryRate -in_target $target_idxml\
		-in_decoy $decoy_idxml\
		-out res.idXML\
		-threads $numthreads
	fdr_res=res.idXML
}*
deftask calculateFDR(fdr_res(File):idxml_results(File) numthreads) in bash *{
	FalseDiscoveryRate -in $idxml_results\
		-out res.idXML\
		-threads $numthreads
	fdr_res=res.idXML
}*

#
deftask mapPeptides(MappedResults(File):idxml_results(File) db_fasta(File)) in bash *{
	PeptideIndexer -in $idxml_results\
		-fasta $db_fasta\
		-out mappedres.idXML\
		-missing_decoy_action warn\
		-allow_unmatched\
		-aaa_max 4\
		-enzyme:name Trypsin\
		-enzyme:specificity semi
	MappedResults=mappedres.idXML
}*

# Convert resutls into easier to read csv format.
deftask idxml2csv(csv_results(File):idxml_results(File) mzMLFile(File)) in bash *{
	csv_results=$(basename $mzMLFile).csv
	TextExporter -in $idxml_results -out $csv_results
}*

# Create consensus using OpenMS ConsensusID
deftask runConsensus(Consensus(File):idxml_results(File) pmt fmt numthreads) in bash *{
	mv $idxml_results res.idXML
	ConsensusID -in res.idXML\
		-out cons.idXML\
		-rt_delta 5\
		-mz_delta $pmt\
		-algorithm ranks\
		-threads $numthreads\
		-filter:considered_hits 10\
		-filter:min_support 0
	Consensus=cons.idXML
}*

# Merged multiple idXML files
deftask mergeResults(MergedResults(File):<idxml_results(File)>) in bash *{
	#iterate files and split by spaces and make sure they end in .idXML
	for i in ${idxml_results[@]}
	do
		cp $i $i.idXML
	done
	files=`ls *.idXML`
	IDMerger -in $files -out merged.idXML
	MergedResults=merged.idXML
}*

# Convert from mzdata, mzXML, mzML, .., mgf to mzML.
deftask convertSpectraFiles(mzMLFile(File):spectraFile(File)) in bash *{
	arr=(${spectraFile//'_'/ })
	echo ${arr[@]}
	arr=(${arr[2]//'.'/ })
	fn=${arr[0]}.mzML
	FileConverter -in $spectraFile -out $fn -out_type mzML
	mzMLFile=$fn;
}*

# Turn a tar file into a list of spectra files.
deftask getSupportedSpectraFilesFromTar(<spectraFiles(File)>:spectra_tar(File)) in bash *{
	tar xf $spectra_tar
	spectraFiles=`tar tf $spectra_tar`
}*

# gunzip
deftask gunzip( out( File ) : gz( File ) )in bash *{
  gzip -c -d $gz > $out
}*

# cat
deftask cat( out( File ) : <file( File )> )in bash *{
  cat ${file[@]} > $out
}*

deftask makeDecoyDB(db_fasta_decoy(File):db_fasta(File)) in bash *{
	DecoyDatabase -in $db_fasta -out decoy.fasta
	db_fasta_decoy=decoy.fasta
}*
