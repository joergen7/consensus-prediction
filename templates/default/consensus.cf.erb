# Input data and settings
spectra_tar="spectra.tar";
db_fasta="barleyprots.fa";
blast_index_name="barleyprots";
omssa_mods="mods.xml";
omssa_usermods="usermods.xml";

# Convert Spectra and index databases
spectraFiles=getSupportedSpectraFilesFromTar(spectra_tar:spectra_tar);
mzMLFiles=convertSpectraFiles(spectraFile:spectraFiles);
#mzMLFiles;
db_blastDB_tar=makeBlastDB(db_fasta:db_fasta idx_name:blast_index_name);
#db_blastDB_tar;
db_msgfDB_tar=makeMsgfDB(db_fasta:db_fasta);
#db_msgfDB_tar;
db_TandemDB=makeTandemDB(db_fasta:db_fasta);
#db_TandemDB;

# Run database search tools
OmssaRes=runOmssa(mzMLFile:mzMLFiles db_blastDB_tar:db_blastDB_tar blast_index_name:blast_index_name omssa_mods:omssa_mods omssa_usermods:omssa_usermods);
#OmssaRes;
MsgfRes=runMsgf(mzMLFile:mzMLFiles db_fasta:db_fasta db_msgfDB_tar:db_msgfDB_tar);
#MsgfRes;
TandemRes=runTandem(mzMLFile:mzMLFiles db_TandemDB:db_TandemDB);
#TandemRes;

# Create consensus
mergedOmssa=mergeResults(idxml_results:OmssaRes);
mergedMsgf=mergeResults(idxml_results:MsgfRes);
mergedTandem=mergeResults(idxml_results:TandemRes);
allresults=mergedOmssa mergedMsgf mergedTandem;
mergedResults=mergeResults(idxml_results:allresults);

ConsensusResults=runConsensus(idxml_results:mergedResults);
csv_results=idxml2csv(idxml_results:ConsensusResults);
csv_results;

###################################################################
# 			   Deftasks                            #
###################################################################

#
# 			Run Algorithms
#

# Run OMSSA on the mzML data using the TOPP OMSSAAdapter
deftask runOmssa(OmssaRes(File):mzMLFile(File) db_blastDB_tar(File) blast_index_name omssa_mods(File) omssa_usermods(File)) in bash *{
	tar xf $db_blastDB_tar
	#ol=`whereis omssacl`
	#arr=($ol)
	#ln -s ${arr[1]} omssacl
	ln -s `which omssacl` omssacl
	OMSSAAdapter -in $mzMLFile -out res.idXML -database ${blast_index_name}.psq -omssa_executable omssacl
	OmssaRes=res.idXML
}*

# Run MSGF+ on the mzML data using the TOPP MSGFPlusAdapter
deftask runMsgf(MsgfRes(File):mzMLFile(File) db_fasta(File) db_msgfDB_tar(File)) in bash *{
	tar xf $db_msgfDB_tar
	mv $mzMLFile spectra.mzML
	MSGFPlusAdapter -in spectra.mzML -out msgf.idXML -database $db_fasta -executable /opt/software/msgf/MSGFPlus.jar
	MsgfRes=msgf.idXML
}*

# Run X!Tandem on the mzML data using the TOPP XTandenAdapter
deftask runTandem(TandemRes(File):mzMLFile(File) db_TandemDB(File)) in bash *{
	XTandemAdapter -in $mzMLFile -database $db_TandemDB -out tres.idXML
	TandemRes=tres.idXML
}*

#
# 			Index Databases
#

# Index fasta database using makeblastdb from ncbi
deftask makeBlastDB(db_blastDB_tar(File):db_fasta(File) idx_name) in bash *{
	makeblastdb -in $db_fasta -dbtype prot -hash_index -out $idx_name
	tar cf db.tar --remove-files $idx_name*
	db_blastDB_tar=db.tar
}*

# Index fasta database using MSGF+
deftask makeMsgfDB(db_msgfDB_tar(File):db_fasta(File)) in bash *{
	buildsa -d $db_fasta -tda 0
	tar cf msgfdb.tar *.canno *.cnlcp *.csarr *.cseq $db_fasta
	db_msgfDB_tar=msgfdb.tar
}*

# Index fasta database using XTandem
deftask makeTandemDB(db_tandemDB(File):db_fasta(File)) in bash *{
	fasta_pro.exe $db_fasta
	db_tandemDB=${db_fasta}.pro
}*

#
#			Other Tasks
#

# Convert resutls into easier to read csv format.
deftask idxml2csv(csv_results(File):idxml_results(File)) in bash *{
	TextExporter -in $idxml_resutls -out res.csv
	csv_results=res.csv
}*

# Create consensus using OpenMS ConsensusID
deftask runConsensus(Consensus(File):idxml_results(File)) in bash *{
	mv $idxml_results res.idXML
	ConsensusID -in res.idXML -out cons.idXML
	Consensus=cons.idXML
}*

# Merged multiple idXML files
deftask mergeResults(MergedResults(File):<idxml_results(File)>) in bash *{
	#iterate files and split by spaces and make sure they end in .idXML
	for i in ${idxml_results[@]}
	do
		cp $i $i.idXML
	done
	files=`ls *.idXML`
	IDMerger -in $files -out merged.idXML
	MergedResults=merged.idXML
}*

# Convert from mzdata, mzXML, mzML, .., mgf to mzML.
deftask convertSpectraFiles(mzMLFile(File):spectraFile(File)) in bash *{
	FileConverter -in $spectraFile -out $mzMLFile -out_type mzML
}*

# Turn a tar file into a list of spectra files.
deftask getSupportedSpectraFilesFromTar(<spectraFiles(File)>:spectra_tar(File)) in bash *{
	tar xf $spectra_tar
	spectraFiles=`tar tf $spectra_tar`
}*
